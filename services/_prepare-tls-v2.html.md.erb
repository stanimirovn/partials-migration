This topic provides an overview of how to prepare for using Transport Layer Security (TLS)
with <%= product_full %> to secure communication between apps and service instances.<br>

<p class="note warning"><strong>Warning:</strong> This procedure involves restarting
	all of the VMs in your deployment to apply a CA certificate. The
	operation can take a long time to complete.
</p>


<p class="note"><strong>Note: </strong>
  This certificate is shared by multiple tiles.
  If you have already done this procedure, you do not need to repeat it.<br><br>
	However, an operator must rotate the this
	certificate if it expires or if it becomes compromised.
	For instructions about how to rotate your CA certificate follow the steps in
  <a href="./rotating-ca.html">Rotating CA Certificates</a>.
</p>

##<a id='overview'></a> Overview

<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>

When you use TLS, a new port is co-located with <%= product_short %> service instances.
Apps and clients can use this secure port to establish encrypted connections with the service.

<% else %>

When you use TLS, you are provisioned a <%= product_short %> server with a certificate.
With this certificate, apps and clients can establish an encrypted connection with
the service.

<% end %>

Through BOSH CredHub, Ops Manager generates a server certificate using a Certificate Authority (CA)
certificate.

If you do not want to use the CA certificate generated, you can provide
your own CA certificate and add it through the CredHub CLI.
For an overview of the purpose and functionality of the
CredHub component, see [CredHub](https://docs.pivotal.io/platform/credhub/).</s>

Apps and clients use this CA certificate to check that the server certificate is
trustworthy. A trustworthy server certificate allows apps and clients to
securely communicate with the <%= product_short %> server.

<%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) shares the CA certificate
public component:
<% if vars.product_short == "Tanzu RabbitMQ" %>
<%= vars.app_runtime_abbr %> provisions a copy of the CA certificate in the trusted store of each
container's operating system.

<% else %>

* <%= vars.app_runtime_abbr %> provisions a copy of the CA certificate in the trusted store of each
container's operating system.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
Apps written in Java and Spring, or C# and Steeltoe, automatically discover the CA certificate in the trusted store.
<% end %>
<% if vars.product_short == "Tanzu SQL for VMs" %>
Apps written in Java and Spring automatically discover the CA certificate in the trusted store.
<% end %>

* <%= vars.app_runtime_abbr %> supplies the public CA certificate in an environment variable called
`VCAP_SERVICES` that exists in every container.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
Apps not written in Java and Spring, or C# and Steeltoe, can retrieve the public component of the CA certificate from `VCAP_SERVICES`
and use it to establish an encrypted connection with the data service.
<% end %>
<% if vars.product_short == "Tanzu SQL for VMs" %>
Apps not written in Java and Spring can retrieve the public component of the CA certificate from `VCAP_SERVICES`
and use it to establish an encrypted connection with the data service.
<% end %>

<% end %>

<% if vars.product_short == "Tanzu SQL for VMs" %>
##<a id='required-or-optional'></a> TLS Required or Optional?

You must enable TLS if you are using Multi-Site Replication.

Also, if you use HA cluster, you need to enable TLS to facilitate restoring data from backup.
This is because to restore an HA cluster, you first create a Multi-Site Replication service instance.
In turn, before you can create a Multi-Site Replication service instance, you need TLS enabled.
For information about restoring an HA cluster,
see [Restore a Service Instance](backup-restore.html#restore) in _Backing Up and Restoring VMware Tanzu SQL with MySQL for VMs_.

In production environments, VMware recommends enabling TLS as a security practice,
regardless of the database topology.
<% end %>

##<a id='two-sources-of-ca'></a> Generated or Provided CA Certificate

Ops Manager can generate a CA certificate for TLS to use.

Alternatively, you can choose to provide your own CA certificate for TLS to use.

<% if vars.product_short == "Tanzu SQL for VMs" %>
<p class="note"><strong>Note:</strong>
If you are using Ops Manager v2.5 or earlier, then Ops Manager does not
generate a certificate.
You must generate one with CredHub.
To use TLS with Ops Manager v2.5 or earlier, see
<a href="https://docs.pivotal.io/p-mysql/2-6/prepare-tls.html">Preparing for TLS</a>
in MySQL for PCF v2.6.
</p>
<% end %>


##<a id='workflow'></a> Workflow


The workflow you follow to prepare for TLS depends on whether you use the CA certificate
generated by Ops Manager or if you bring your own CA certificate.


###<a id='workflow-generated'></a> If Using the Generated CA Certificate

To use the CA certificate that Ops Manager generates through CredHub,
follow this workflow to enable TLS for <%= product_full %>:

1. An operator adds the CredHub-generated certificate to Ops Manager
   by performing the procedures:
    1.  <a href="#credhub-creds">Find the CredHub Credentials in <%= vars.ops_manager %></a> below
    3.  <a href='#add-ca-cert'> Add the CA Certificate</a> below

1. An operator enables TLS in the tile configuration while installing <%= product_short %>.
			See [Enable TLS in <%= product_short %>](#enable) below.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
1. An app developer modifies their app to communicate securely with the <%= product_short %> server.
See [Using TLS](./appdevs.html#using-tls).
<% end %>
<% if vars.product_short == "Tanzu SQL for VMs" %>
1. A developer modifies their app to communicate securely with the <%= product_short %> server:
	+ **For Java and Spring apps:**
	See [Activate TLS for Java and Spring Apps](./using-tls.html#activate-spring).
	+ **For all other apps:** See [Activate TLS for Non-Spring Apps](./using-tls.html#activate-non-spring).
<% end %>
<% if vars.product_short == "Tanzu RabbitMQ" %>
1. A developer enables TLS for an existing service instance.
		See [Enable TLS for Your Service Instance](./use.html#tls) below.
1. A developer modifies their app to communicate securely with the <%= product_short %> server:
	+ **For Java or Spring apps:** See [Activate TLS for Java and Spring Apps](./use.html#tls-java-spring).
  + **For all other apps:** See [Modifying Apps for TLS](./modify-apps-tls.html).
<% end %>

###<a id='workflow-bring-your-own'></a> If Providing Your Own CA Certificate

To provide your own CA certificate instead of using the one that Ops Manager
generates, follow this workflow to enable TLS for <%= product_full %>:

1. An operator provides a CA certificate to CredHub by performing the procedures:
    1.  <a href="#credhub-creds">Find the CredHub Credentials in <%= vars.ops_manager %></a> below
    2.  <a href="#set-custom-cert">Set a Custom CA Certificate</a> below
    3.  <a href='#add-ca-cert'> Add the CA Certificate</a> below.

1. An operator enables TLS in the tile configuration while installing <%= product_short %>.
			See [Enable TLS in <%= product_short %>](#enable) below.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
1. An app developer modifies their app to communicate securely with the <%= product_short %> server.
See [Using TLS](./appdevs.html#using-tls).
<% end %>
<% if vars.product_short == "Tanzu SQL for VMs" %>
1. A developer modifies their app to communicate securely with the <%= product_short %> server:
	+ **For Java and Spring apps:**
	See [Activate TLS for Java and Spring Apps](./using-tls.html#activate-spring).
	+ **For all other apps:** See [Activate TLS for Non-Spring Apps](./using-tls.html#activate-non-spring).
<% end %>
<% if vars.product_short == "Tanzu RabbitMQ" %>
1. A developer enables TLS for an existing service instance.
		See [Enable TLS for Your Service Instance](./use.html#tls) below.
1. A developer modifies their app to communicate securely with the <%= product_short %> server:
	+ **For Java or Spring apps:** See [Activate TLS for Java and Spring Apps](./use.html#tls-java-spring).
  + **For all other apps:** See [Modifying Apps for TLS](./modify-apps-tls.html).
<% end %>

##<a id='credhub-creds'></a> Find the CredHub Credentials in <%= vars.ops_manager %>

To find the BOSH CredHub client name and client secret:

1. In the <%= vars.ops_manager %> Installation Dashboard, click the BOSH Director tile.
1. Click the **Credentials** tab.
1. In the BOSH Director section, click the link to the **BOSH Commandline Credentials**.
	![Screenshot of the BOSH Director section of the credentials tab in the BOSH Director tile.
	A red box indicates the location of 'BOSH Commandline Credentials', which is 14 rows
	down underneath 'UAA BBR Client Credentials'. Each row has a link titled 'Link to credentials'.](credhub-creds.png)
	<a href="./images/credhub-creds.png" target="_blank" aria-hidden="true">
    Click here to view a larger version of this image</a>
1. Record the values for `BOSH_CLIENT` and `BOSH_CLIENT_SECRET`.


	Here is an example of the credentials page:

	```
	{"credential":"BOSH_CLIENT=ops_manager
	BOSH_CLIENT_SECRET=abCdE1FgHIjkL2m3n-3PqrsT4EUVwXy5
	BOSH_CA_CERT=/var/tempest/workspaces/default/root_ca_certificate
	BOSH_ENVIRONMENT=10.0.0.5 bosh "}
	```
  The `BOSH_CLIENT` is the BOSH CredHub client name and the `BOSH_CLIENT_SECRET` is
	the BOSH CredHub client secret.


##<a id='set-custom-cert'></a> Set a Custom CA Certificate

**Prerequisite:** To complete this procedure, you need to have the Credhub CLI.
For installation instructions, see
[credhub-cli](https://github.com/cloudfoundry-incubator/credhub-cli) on GitHub.

Do this procedure if you are providing your own custom CA certificate
instead of using the one generated by Ops Manager or CredHub.

To add a custom CA Certificate to CredHub:

1. Record the information needed to log in to the BOSH Director VM by following the procedure in
[Gather Credential and IP Address Information](https://docs.pivotal.io/pivotalcf/2-4/customizing/trouble-advanced.html#gather).

2. Log in to the <%= vars.ops_manager %> VM by following the procedure in
[Log in to the <%= vars.ops_manager %> VM with SSH](https://docs.pivotal.io/pivotalcf/2-4/customizing/trouble-advanced.html#ssh).

3. Set the API target of the CredHub CLI as your CredHub server by running:

    ```
    credhub api  \
		https://BOSH-DIRECTOR-IP:8844 \
		--ca-cert=/var/tempest/workspaces/default/root_ca_certificate
    ```
    Where `BOSH-DIRECTOR-IP` is the IP address of the BOSH Director VM.
		<br><br>
    For example:
    <pre class="terminal">$ credhub api \
		http<span>s:</span>//10.0.0.5:8844 \
		--ca-cert=/var/tempest/workspaces/default/root\_ca\_certificate</pre>

4. Log in to CredHub by running:

    ```
    credhub login \
		--client-name=CREDHUB-CLIENT-NAME \
		--client-secret=CREDHUB-CLIENT-SECRET
    ```
    Where
    * `CREDHUB-CLIENT-NAME` is the value you recorded for `BOSH_CLIENT` in
		[Find the CredHub Credentials in <%= vars.ops_manager %>](#credhub-creds) above.
    * `CREDHUB-CLIENT-SECRET` is the value you recorded for `BOSH_CLIENT_SECRET` in
		[Find the CredHub Credentials in <%= vars.ops_manager %>](#credhub-creds) above.

    For example:
    <pre class="terminal">$ credhub login \
	    	--client-name=credhub \
	    	--client-secret=abcdefghijklm123456789</pre>

5. Use the CredHub CLI to provide a CA certificate.
    <p class="note"><strong>Note</strong>: Your deployment can have
			multiple CA certificates.
       VMware recommends a dedicated CA certificate for services.</p>
    Create a new file called `root.pem` with the contents of the certificate.
    Then, run the following command, specifying the path to `root.pem` and
		the private key for the certificate. For example:
	    <pre class="terminal">$ credhub set \
	        --name="/services/tls_ca" \
	        --type="certificate" \
	        --certificate=./root.pem \
	        --private=ERKSOSMFF...</pre>


##<a id='add-ca-cert'></a> Add the CA Certificate

**Prerequisite:** To complete this procedure, you need to have the Credhub CLI.
For installation instructions, see
[credhub-cli](https://github.com/cloudfoundry-incubator/credhub-cli) on GitHub.

To add the CA Certificate to <%= vars.ops_manager %>:

6. Record the CA certificate by running:

	 ```
   credhub get \
	   --name=/services/tls_ca \
	   -k ca
   ```

7. Navigate to the <%= vars.ops_manager %> **Installation Dashboard** > **BOSH Director** > **Security**.

8. Append the contents of the CA certificate you recorded in the previous step into **Trusted Certificates**.

9. Click **Save**.

<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
1. Ensure relevant app security groups are open for port 16379.
This can be done through the Cloud Foundry Command Line Interface (cf CLI).
For more information, see [Managing ASGs with the cf CLI](https://docs.pivotal.io/application-service/concepts/asg.html#procedures).
<% end %>

##<a id='enable'></a> Enable TLS in <%= product_short %>

To enable TLS in the <%= product_short %> tile:

1. Enable TLS by doing one of the following:
	+ **If you are configuring TLS for an existing installation:**
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
Follow the procedure in
	[Upgrade <%= product_full %>](./upgrade.html#upgrades).
<% else %>
Follow the procedure in
	[Configure Security](./install-config.html#security).
<% end %>
	+ **If you are configuring TLS for a new installation:**
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
	Follow the procedures in
	[Configure On-Demand Service Settings](./installing.html#on-demand-config),
	including enabling TLS in the **On-Demand Service Settings** tab.
	<% else %>
	Follow the procedures in
	[Installing and Configuring <%= product_short %>](./install-config.html),
	including enabling TLS in the [Configure Security](./install-config.html#security) section.
	<% end %>
1. Navigate to **<%= vars.ops_manager %> Installation Dashboard** > **Review Pending Changes**.
1. Ensure that the CA certificate is deployed to all VMs by selecting:
	+ <%= vars.app_runtime_full %>
	+ <%= product_full %>
	+ The **Upgrade All On-Demand Service Instances** errand
3. Click **Apply Changes**.
This restarts all the VMs in your deployment and applies your CA certificate.
