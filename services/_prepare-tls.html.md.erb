This topic provides an overview of how to prepare for using Transport Layer Security (TLS)
with <%= product_full %> to secure communication between apps and service instances.<br>

This topic explains how to provide an existing CA certificate to BOSH CredHub and
generate a new CA certificate with BOSH CredHub.

<p class="note warning"><strong>Warning:</strong> This procedure involves restarting
	all of the VMs in your deployment to apply a CA certificate. The
	operation can take a long time to complete.
</p>

<p class="note"><strong>Note: </strong>
  This certificate is shared by multiple tiles.
  If you have already done this procedure, you do not need to repeat it.<br><br>
	However, an operator must rotate the this
	certificate if it expires or if it becomes compromised.
	For instructions about how to rotate your CA certificate follow the steps in
  <a href="./rotating-ca.html">Rotating CA Certificates</a>.
</p>

##<a id='overview'></a> Overview

<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>

When you use TLS, a new port is co-located with <%= product_short %> service instances.
Apps and clients can use this secure port to establish encrypted connections with the service.

<% else %>

When you use TLS, you are provisioned a <%= product_short %> server with a certificate.
With this certificate, apps and clients can establish an encrypted connection with
the service.

<% end %>

CredHub generates a server certificate using a Certificate Authority (CA)
certificate. You can either provide the CA or generate it using CredHub.
For an overview of the purpose and functionality of the
CredHub component, see [CredHub](https://docs.pivotal.io/platform/credhub/).

Apps and clients use this CA certificate to check that the server certificate is
trustworthy. A trustworthy server certificate allows apps and clients to
securely communicate with the <%= product_short %> server.

<%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) shares the CA certificate
public component in the following ways:

* <%= vars.app_runtime_abbr %> provisions a copy of the CA certificate in the trusted store of each
container's operating system.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
Apps written in Java and Spring, or C# and Steeltoe, automatically discover the CA certificate in the trusted store.
<% else %>
Apps written in Java and Spring automatically discover the CA certificate in the trusted store.
<% end %>

* <%= vars.app_runtime_abbr %> supplies the public CA certificate in an environment variable called
`VCAP_SERVICES` that exists in every container.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
Apps not written in Java and Spring, or C# and Steeltoe, can retrieve the public component of the CA certificate from `VCAP_SERVICES`
and use it to establish an encrypted connection with the data service.
<% else %>
Apps not written in Java and Spring can retrieve the public component of the CA certificate from `VCAP_SERVICES`
and use it to establish an encrypted connection with the data service.
<% end %>

##<a id='preq'></a> Prerequisite

Before you do the procedures in this topic, you must install the Credhub CLI.
For instructions, see
[credhub-cli](https://github.com/cloudfoundry-incubator/credhub-cli) on GitHub.
##<a id='workflow'></a> Workflow

The following workflow describes enabling TLS for <%= product_full %>:

1. An operator provides a CA certificate to CredHub by performing the procedures
	in <a href="#credhub-creds">Find the CredHub Credentials in <%= vars.ops_manager %></a> and
	in <a href='#add-ca-cert'> Add the CA Certificate</a> below.
1. An operator enables TLS in the tile configuration while installing <%= product_short %>.
			See [Enable TLS in <%= product_short %>](#enable) below.
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
1. An app developer modifies their app to communicate securely with the <%= product_short %> server.
See [Using TLS](./appdevs.html#using-tls).
<% end %>
<% if vars.product_short == "Tanzu SQL for VMs" %>
1. A developer enables TLS for an existing service instance.
    See [Using TLS](./using-tls.html).
1. A developer modifies their app to communicate securely with the <%= product_short %> server:
	+ **For Java and Spring apps:**
	See [Activate TLS for Java and Spring Apps](./using-tls.html#activate-spring).
	+ **For all other apps:** See [Activate TLS for Non-Spring Apps](./using-tls.html#activate-non-spring).
<% end %>
<% if vars.product_short == "Tanzu RabbitMQ" %>
1. A developer enables TLS for an existing service instance.
		See [Enable TLS for Your Service Instance](./use.html#tls)
1. A developer modifies their app to communicate securely with the <%= product_short %> server:
	+ **For Java or Spring apps:** See [Activate TLS for Java and Spring Apps](./use.html#tls-java-spring).
  + **For all other apps:** See [Modifying Apps for TLS](./modify-apps-tls.html)
<% end %>

##<a id='credhub-creds'></a> Find the CredHub Credentials in <%= vars.ops_manager %>

To find the BOSH CredHub client name and client secret:

1. In the <%= vars.ops_manager %> Installation Dashboard, click the BOSH Director tile.
1. Click the **Credentials** tab.
1. In the BOSH Director section, click the link to the **BOSH Commandline Credentials**.
	![Screenshot of the BOSH Director section of the credentials tab in the BOSH Director tile.
	A red box indicates the location of 'BOSH Commandline Credentials', which is 14 rows
	down underneath 'Uaa Bbr Client Credentials'. Each row has a link titled 'Link to credentials'.](credhub-creds.png)
1. Record the values for `BOSH_CLIENT` and `BOSH_CLIENT_SECRET`.


	Here is an example of the credentials page:

	```
	{"credential":"BOSH_CLIENT=ops_manager
	BOSH_CLIENT_SECRET=abCdE1FgHIjkL2m3n-3PqrsT4EUVwXy5
	BOSH_CA_CERT=/var/tempest/workspaces/default/root_ca_certificate
	BOSH_ENVIRONMENT=10.0.0.5 bosh "}
	```
  The `BOSH_CLIENT` is the BOSH CredHub client name and the `BOSH_CLIENT_SECRET` is
	the BOSH CredHub client secret.


##<a id='add-ca-cert'></a> Add the CA Certificate

To generate and add the CA Certificate to <%= vars.ops_manager %>:

1. Record the information needed to log in to the BOSH Director VM by following the procedure in
[Gather Credential and IP Address Information](https://docs.pivotal.io/pivotalcf/2-4/customizing/trouble-advanced.html#gather).

1. Log in to the <%= vars.ops_manager %> VM by following the procedure in
[Log in to the <%= vars.ops_manager %> VM with SSH](https://docs.pivotal.io/pivotalcf/2-4/customizing/trouble-advanced.html#ssh).

1. Set the API target of the CredHub CLI as your CredHub server by running:

    ```
    credhub api  \
		https://BOSH-DIRECTOR-IP:8844 \
		--ca-cert=/var/tempest/workspaces/default/root_ca_certificate
    ```

    Where `BOSH-DIRECTOR-IP` is the IP address of the BOSH Director VM.
    For example:
    <pre class="terminal">$ credhub api \
		http<span>s:</span>//10.0.0.5:8844 \
		--ca-cert=/var/tempest/workspaces/default/root\_ca\_certificate</pre>

2. Log in to CredHub by running:

    ```
    credhub login \
		--client-name=CREDHUB-CLIENT-NAME \
		--client-secret=CREDHUB-CLIENT-SECRET
    ```
    Where
    * `CREDHUB-CLIENT-NAME` is the value you recorded for `BOSH_CLIENT` in
		[Find the CredHub Credentials in <%= vars.ops_manager %>](#credhub-creds) above.
    * `CREDHUB-CLIENT-SECRET` is the value you recorded for `BOSH_CLIENT_SECRET` in
		[Find the CredHub Credentials in <%= vars.ops_manager %>](#credhub-creds) above. <br>
    For example:
    <pre class="terminal">$ credhub login \
	    	--client-name=credhub \
	    	--client-secret=abcdefghijklm123456789</pre>

3. If you are using <%= vars.ops_manager %> v2.6 or later, skip this step and the next step.
   Otherwise, find out if a services CA certificate already is present by running the following command:

	```
	credhub get --name="/services/tls_ca"
	```
	If you already have a certificate at the `services/tls_ca` path, skip the next step.

4. Use the CredHub CLI to generate a CA certificate or provide an existing one.
    <p class="note"><strong>Note</strong>: Your deployment can have
			multiple CA certificates.
       VMware recommends a dedicated CA certificate for services.</p>
	* **If you do not have a CA certificate:** Use the CredHub CLI to generate one by running:
			<pre class="terminal">$ credhub generate \
			--name="/services/tls\_ca" \
			--type="certificate" \
			--is-ca \
            --common-name="rootCA"</pre>

		<p class="note"><strong>Note:</strong> When you run the above command,
			the generated certificate is valid for one year by default.
		You can use the <code>--duration</code> flag to set the validity period to a specific time.
		For example, if you add <code>--duration=1825</code> to the above command,
		the generated certificate is valid for five years.</p>
	* **If you have an existing CA certificate that you want to use:** Create
	a new file called `root.pem` with the contents of the certificate.
	  Then run the following command, specifying the path to `root.pem` and
		the private key for the certificate:
	    <pre class="terminal">$ credhub set \
	        --name="/services/tls_ca" \
	        --type="certificate" \
	        --certificate=./root.pem \
	        --private=ERKSOSMFF...</pre>
5. Record the `certificate` portion from the CA certificate by running:

	 ```
   credhub get \
	   --name=/services/tls_ca \
	   -k ca
   ```

1. Navigate to the <%= vars.ops_manager %> **Installation Dashboard** > **BOSH Director** > **Security**.

8. Append the contents of the CA certificate you recorded in the previous step into **Trusted Certificates**.

1. Click **Save**.

<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
1. Ensure relevant app security groups are open for port 16379.
This can be done through the Cloud Foundry Command Line Interface (cf CLI).
For more information, see [Managing ASGs with the cf CLI](https://docs.pivotal.io/application-service/concepts/asg.html#procedures).
<% end %>

##<a id='enable'></a> Enable TLS in <%= product_short %>

To enable TLS in the <%= product_short %> tile:

1. Enable TLS by doing one of the following:
	+ **If you are configuring TLS for an existing installation:**
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
Follow the procedure in
	[Upgrade <%= product_full %>](./upgrade.html#upgrades).
<% else %>
Follow the procedure in
	[Configure Security](./install-config.html#security).
<% end %>
	+ **If you are configuring TLS for a new installation:**
<% if vars.product_short == "Redis for Tanzu Application Service" || vars.product_short == "Redis for Pivotal Platform" %>
	Follow the procedures in
	[Configure On-Demand Service Settings](./installing.html#on-demand-config),
	including enabling TLS in the **On-Demand Service Settings** tab.
	<% else %>
	Follow the procedures in
	[Installing and Configuring <%= product_short %>](./install-config.html),
	including enabling TLS in the [Configure Security](./install-config.html#security) section.
	<% end %>
1. Navigate to **<%= vars.ops_manager %> Installation Dashboard** > **Review Pending Changes**.
1. Ensure that the CA certificate is deployed to all VMs by selecting:
	+ <%= vars.app_runtime_full %>
	+ <%= product_full %>
	+ The **Upgrade All On-Demand Service Instances** errand
3. Click **Apply Changes**.
This restarts all the VMs in your deployment and applies your CA certificate.
